##Ubuntu 安装 git
sudo apt-get install git

##git  设置
git config --global user.name “Your Name”
git config --global user.email “email@example.com”

##创建版本库并将其变为git可管理的仓库
makedir **//文件夹
git init

##创建文件**.**，放在目录下。
vi **.**

##使用git add将文件添加到仓库。
git add **.**

##使用命令git commit将文件提交到仓库
git commit -m "说明"

##查看状态
git status

##查看修改的部分
git diff

##查看git日志
git log

##退回到之前的版本
git reset --hard HEAD^    //上个版本
git reset --hard HEAD^^   //上上个版本
git reset --hard HEAD~100 //前100个版本

##在不关终端的环境下（可以看到被替代的commit ID）返回被替代的版本
git reset --hard ****（commit ID的前几位数，方便git查找）

##记住你的每一个命令
git reflog

##查看工作区和版本库里最新版的区别
git diff HEAD -- ***.**

##丢弃工作区的修改(没加到暂存区)
git checkout -- ***.**

##加到了暂存区，先将暂存区的修改退回到工作区，再丢弃工作区修改
git reset HEAD <file>

##如果提交到了版本库，将版本退回到上一版本，如果提交到版本库，并推送了，就无法更改了

##要删除文件时，先在工作空间中删除，再git rm并git commit
git rm <file>
git commit -m "***"

##删错时，可用版本库里的版本替换工作区的版本
git checkout -- file

##在电脑上创建SSH KEY,并将key添加到github中
ssh-keygen -t rsa -C "email"

##将本地已有仓库和GitHub仓库相关联
git remote add	gitorigin git@github.com:AbsoluteChou/Learning.git

##将本地库内容推送到远程库
git push -u gitorigin master

##将github上已经存在的仓库克隆到本地
git clone git@github.com:AbsoluteChou/仓库.git

##查看分支/创建分支/切换分支
git branch / git branch <name> / git checkout <name>

##创建加切换分支
git checkout -b <name>

##合并某分支到当前分支
git merge <name>

##删除分支
git branch -d <name>

##当分支合并时出现合并失败时，可以使用git status查看冲突内容（虽然合并失败，但是HEAD指向的文件已经是合并完的文件，内容中有不同的显示），可以打开文件，内部会有文件冲突的内容显示，手动修改后，可再提交。git log可以查看分支合并情况。git log --graph可以查看分支合并图。然后再删除分支。

##分支管理：一般推荐在dev分支上进行工作，master分支上只进行发布确定的版本，当多人协同工作时，可同时在dev分支上进行汇总，最后将需要的版本发布到master上。在这种情况下就需要在合并分支时保留分支上的信息。此时合并分支会产生一个新的commit，命令中需要-m
git merge --no-ff -m “说明” 分支

##bug分支：对急需处理的bug，可将正在进行的未完成工作封存，在主线修改完bug并合并发布后，再打开。
git stash / 存储当前工作
git stash list / 查看封存内容
git stash apply + git stash drop / 恢复现场并删除stash内容
git satsh pop / 以上两个命令合并

##在开发新功能时建议开新的功能分支，完成后合并到dev，如果该分支在未合并到dev之前就要求删除（功能开发放弃），可强行删除分支。
git branch -D <name>

##查看远程仓库信息
git remote 
git remote -v 显示详细信息

##推送分支
git push origin dev（master） / git push <远程库> <分支>

##当从远程库clone时，默认只能看到master分支，要clone其他分支（例如dev），需要创建远程的dev分支到本地
git checkout -b dev origin/dev

##将本地dev分支push到远程
git push origin dev

##当你的推送与其他人的推送有冲突时，push失败，可将最新的提交用git pull从origin/dev抓下来，本地合并后，再推送。当git pull失败，是因为没有指定分支与本地的dev链接
git branch --set-upstream-to-origin/dev dev

##将原本分叉的提交变成一条直线
git rebase

##创建标签，           查看标签
git tag <tagname>     /   git tag

##标签默认是打在最新的commit上的，如果需要打在之前的commit上，需要找到对应的commit ID
git tag <tagname> <commit ID>

##查看标签信息
git show <tagname>

##创建带有说明的标签，用-a指定标签名，-m指定说明文字
git tag -a <tagname> -m "说明" <commit ID>

##删除标签
git tag -d <tagname>

##推送某个标签到远程
git push gitorigin <tagname>

##或一次推送全部标签到远程
git push gitoregin --tags

##当标签已推送到远程时，若需要删除，应先删除本地，再删除远程
git tag -d <tagname>
git push gitorigin :refs/tags/<tagname>

##在git工作区创建.gitignore文件，将要忽略的的文件名填入，git会自动忽略这些文件。编辑完成后要将gitignore也提交到git。有时候当你想将一个文件到git但不能添加时，可能原因是这个文件被.gitignore忽略了，可强制添加到git
git add -f <filename>

##git可设置命令的缩写
git config --global alias.缩写 原命令

